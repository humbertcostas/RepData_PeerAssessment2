sum(my_na)
my_data
my_data/0
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[3]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,10)]
x[c(-2,-10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo",bar")]
""
vect[c("foo","bar")]
bye()
swirl()
1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vetor)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill"", "Gina"", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
?colnames
colnames(my_data) <- cnames
my_data
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "./2012vots.csv")
dateDownloaded <- date()
fileName <- list.files("./")
fileName <- list.files("./")
df <- read.csv("./2012vots.csv")
head(df)
names(df)
sort(names(df))
df[VAL]
df[VAL>=1000000]
df[df$VAL>=1000000,]
length(df[df$VAL>=1000000,])
length(df[df$VAL>1000000,])
cares <- df[df$VAL>=1000000,]
head(cares)
df[df$VAL]
df[df$VAL,]
df[df$VAL==01,]
head(df$VAL)
cares <- df[df$VAL==24,]
length(cares)
head(cares)
df[,c("VAL")]
na.omit(df[,c("VAL")])
kk <- na.omit(df[,c("VAL")])
kk
names(kk)
length(df[df$VAL==24,])
length(na.omit(df[df$VAL==24,]))
head(df)
df[,VAL==24]
df[,df$VAL==24]
cares <- subset(df, VAL==24)
cares
cares(VAL)
cares$VAL
length(cares$VAL)
length(subset(df, VAL==24))
cares <- subset(df, VAL==24)
summary(cares)
kk <- cares$VAL
nrow(subset(df, VAL==24))
df$FEs
df$FES
df$FINCP
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "./DS3.w1.q3.xlsx")
dateDownloaded <- date()
library(xlsx)
library(xls)
library(xlsx)
install.packages("xlsx")
library(xlsx)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
library(xlsx)
gasData <- read.xlsx("./DS3.w1.q3.xlsx")
gasData <- read.xlsx("./DS3.w1.q3.xlsx",sheetIndex=1)
download.file(fileUrl, destfile = "./DS3.w1.q3.xlsx")
gasData <- read.xlsx("./DS3.w1.q3.xlsx",sheetIndex=1)
gasData <- read.xlsx("./DS3.w1.q3.xlsx",sheetIndex==1)
download.file(fileUrl, destfile = "./DS3.w1.q3.xlsx", mode="wb")
gasData <- read.xlsx("./DS3.w1.q3.xlsx",sheetIndex==1)
gasData <- read.xlsx("./DS3.w1.q3.xlsx")
gasData <- read.xlsx("./DS3.w1.q3.xlsx",sheetIndex=1)
head(gasData)
dat <- read.xlsx("./DS3.w1.q3.xlsx",sheetIndex=1, rowIndex=18:23, colIndex=7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
install.packages("XML")
library(XML)
balrest <- read.xlsx("./DS3.w1.q4.xml",sheetIndex=1)
balrest <- xmlTreeParse("./DS3.w1.q4.xml",useInternal=TRUE)
balrest <- xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
balrest <- xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
balrest <- xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileUrl, destfile = "./DS3.w1.q4.xml")
balrest <- xmlTreeParse("./DS3.w1.q4.xml",useInternal=TRUE)
balrest
rootNode <- xmlRoot(blarest)
rootNode <- xmlRoot(balrest)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[]]
rootNode[[1]][[2]]
rootNode[[2]]
rn <- rootNode[[1]]
names(rn)
rn[[1]]
xpathSApply(rn,"//zipcode",xmlValue)
zipcodes <- xpathSApply(rn,"//zipcode",xmlValue)
length(zipcodes)
zipcodes2 <- xpathSApply(rn,"//zipcode",xmlValue==21231)
subset(zipcodes,21231)
subset(zipcodes,==21231)
zipcodes[zipcodes==21231]
length(zipcodes[zipcodes==21231])
names(rootNode)
?fread
install.packages("data.table")
?fread
??fread
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "./DS3.w1.q5.csv")
DT <- fread("./DS3.w1.q5.csv", sep=",")
install.packages("data.table")
DT <- fread("./DS3.w1.q5.csv", sep=",")
require(data.table)
DT <- fread("./DS3.w1.q5.csv", sep=",")
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time({rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2]})
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
race = 1000
f1 = replicate(race,system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}))
cops = 10
f1 = replicate(cops,system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}))
f2 = replicate(cops,system.time(sapply(split(DT$pwgtp15,DT$SEX),mean)))
f3 = replicate(cops,system.time(mean(DT$pwgtp15,by=DT$SEX)))
f4 = replicate(cops,system.time(DT[,mean(pwgtp15),by=SEX]))
f5 = replicate(cops,system.time(tapply(DT$pwgtp15,DT$SEX,mean)))
plot(f1)
plot(f2)
plot(f3)
plot(f4)
plot(f5)
cops = 100
plot(f1)
steps = 100
f1 <- replicate(steps,system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}))
f2 <- replicate(steps,system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]}))
f3 <- replicate(steps,system.time(sapply(split(DT$pwgtp15,DT$SEX),mean)))
f4 <- replicate(steps,system.time(mean(DT$pwgtp15,by=DT$SEX)))
f5 <- replicate(steps,system.time(DT[,mean(pwgtp15),by=SEX]))
f6 <- replicate(steps,system.time(tapply(DT$pwgtp15,DT$SEX,mean)))
f1_av = cumsum(f1) / seq_along(f1)
f2_av = cumsum(f2) / seq_along(f2)
f3_av = cumsum(f3) / seq_along(f3)
f4_av = cumsum(f4) / seq_along(f4)
f5_av = cumsum(f5) / seq_along(f5)
f6_av = cumsum(f6) / seq_along(f6)
topY = max(f1_av,f2_av,f3_av,f4_av,f5_av,f6_av)
lowY = min(f1_av,f2_av,f3_av,f4_av,f5_av,f6_av)
plot(f1_av, type="1", col"#FF000099", ylim=c(lowY,topY), xlab="distance", ylab="average time")
plot(f1_av, type="l", col="#FF000099", ylim=c(lowY,topY), xlab="distance", ylab="average time")
lowY = min(f1_av,f3_av,f4_av,f5_av,f6_av)
topY = max(f1_av,f3_av,f4_av,f5_av,f6_av)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
install.packages('RMySQL')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
install.packages("RMySQL")
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
source("http://bioconductor.org(boicLite.R")
source("http://bioconductor.org/boicLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages('RMySQL',type='source')
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
B
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
attr(B,"scale") <- "liter"
B
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&h1=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&h1=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedy']", xmlValue)
xpathSApply(html, "//tr[@class='gsc_a_tr']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2, as = "text")
parsedHtml = htmlParse(content2, asText = TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
myapp = oath_app("twitter", key=AccessToken, secret=AccessTokenSecre)
ApiKey <- 3ZfDLE3qTFpryA1mv1C5zNlQo
ApiKey <- "3ZfDLE3qTFpryA1mv1C5zNlQo"
ApiSecret <- "NCQS1krI42U8xqZiG9JegOukpXtMkA2xCKhYDfji0W5lzFcvoQ"
AccessToken <- "272460070-2W2ZafARz3fvJjnHSJ7nr5AvShKhq05BjBS2WyRg"
AccessTokenSecret <- "D1tSvrZqX0TIAK3Q256G1vs3pMJ3ck0dxI6Cj3GR9F6PB"
myapp = oauth_app("twitter", key=AccessToken, secret=AccessTokenSecret)
sig = sign_oauth1.0(myapp, token = AccessToken, token_secret = AccessTokenSecret)
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
head(homeTL,1)
head(homeTL,2)
head(homeTL,3)
homeTL
sig = sign_oauth1.0(myapp, token = AccessToken, token_secret = AccessTokenSecret)
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
homeTL[1]
homeTL[2]
homeTL[3]
homeTL[4]
homeTL[5]
homeTL[6]
homeTL[7]
json1 = content(homeTL)
json1
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json1
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json1
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
library(httr);
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json1
Sys.getenv("MYSQL_HOME")
install.packages('RMySQL',type='source')
Sys.setenv(MYSQL_HOME="E:\wamp\bin\mysql\mysql5.5.24")
Sys.setenv(MYSQL_HOME="E:\\wamp\\bin\\mysql\\mysql5.5.24")
Sys.getenv("MYSQL_HOME")
install.packages('RMySQL',type='source')
library(httr)
oauth_endpoints("github")
oauth_endpoints("github")
myapp <- oauth_app("4489848d1baf5f2bbca4", "295c91ede04a49d84573f632cdc1f4e75c6a758f")
myapp <- oauth_app("github", "4489848d1baf5f2bbca4")
myapp <- oauth_app("github", "4489848d1baf5f2bbca4", "295c91ede04a49d84573f632cdc1f4e75c6a758f")
oauth_endpoints("github")
myapp <- oauth_app("github", "4489848d1baf5f2bbca4", "295c91ede04a49d84573f632cdc1f4e75c6a758f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
library(httr)
mygithub$clientID <- "4489848d1baf5f2bbca4"
mygithub.clientID <- "4489848d1baf5f2bbca4"
mygithub.clientSecret <- "295c91ede04a49d84573f632cdc1f4e75c6a758f"
library(httr)
oauth_endpoints("github")
myapp <- oauth_app(mygithub.clientID, mygithub.clientSecret)
myapp <- oauth_app("github", mygithub.clientID, mygithub.clientSecret)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(twitteR)
install.packages(twiiteR)
install.packages(twitteR)
install.packages("C:/Users/NOX/Downloads/twitteR_1.1.7.tar.gz", repos = NULL, type = "source")
install.packages("twitteR")
library(twitteR)
htitote.tweets = searchTwitter('@htitote', n=1500)
ApiKey <- "3ZfDLE3qTFpryA1mv1C5zNlQo"
ApiSecret <- "NCQS1krI42U8xqZiG9JegOukpXtMkA2xCKhYDfji0W5lzFcvoQ"
AccessToken <- "272460070-2W2ZafARz3fvJjnHSJ7nr5AvShKhq05BjBS2WyRg"
AccessTokenSecret <- "D1tSvrZqX0TIAK3Q256G1vs3pMJ3ck0dxI6Cj3GR9F6PB"
myapp = oauth_app("twitter", key=AccessToken, secret=AccessTokenSecret)
library(oauth_app)
library(ROAuth)
lirary(devtools)
library(devtools)
install.packages("devtools")
install_github("twitteR", username="geoffjentry")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "3ZfDLE3qTFpryA1mv1C5zNlQo"
consumerSecret <- "NCQS1krI42U8xqZiG9JegOukpXtMkA2xCKhYDfji0W5lzFcvoQ"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
registerTwitterOAuth(twitCred)
twitCred$handshake()
library(RCurl)
library(devtools)
find_rtools()
myapp = oauth_app("twitter", key=ApiKey, secret=ApiSecret)
myapp = oauth_app("twitter", key=AccessToken, secret=AccessTokenSecret)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
quit
quit()
library("twitteR", lib.loc="~/R/win-library/3.1")
library("httr", lib.loc="~/R/win-library/3.1")
mymap
myapp
library("ggplot2", lib.loc="~/R/win-library/3.1")
library(nlme)
library(lattice)
xplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
str(Diet)
str(BodyWeight)
?axis()
?panel.abline()
?text()
?panel.abline()
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?trellis.par.set()
?splom()
?par()
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
g <- ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, clo = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(1, 2, 1, each = 4), sd = 0.2)
plot(x, y, clo = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(1, 2, 1, each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataframe <- data.frame(x = x, y = y)
dist(dataframe)
distxy <- dist(dataframe)
hClustering <- hclust(distxy)
plot(hClustering)
hClustering
dataframe
as.matrix(dataframe)
sample(1:12)
as.matrix(dataframe)[sample(1:12),]
set.seed(1234)
dataMatrix <- as.matrix(dataframe)[sample(1:12),]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1,2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[,nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[,order(kmeansObj2$cluster)], yaxt = "n")
set.seed(12345)
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
dataMatrix
t(dataMatrix)
class(dataMatrix)
class(t(dataMatrix))
t(dataMatrix)[2,23]
dataMatrix[2,23]
t(dataMatrix)[23,2]
dataMatrix[23,2]
nrow(dataMatrix)
heatmap(dataMatrix)
rep(c(0,3), each = 5)
set.seed(678910)
for(i in 1:40){}
for(i in 1:40){
coin <- rbinom(1, size = 1, prob = 0,5)
if (coin) {
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,3), each = 5)
}}
for(i in 1:40){
coin <- rbinom(1, size = 1, prob = 0,5)
if (coin) {
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,3), each = 5)
}
}
rbinom(1, size = 1, prob = 0,5)
for(i in 1:40){
coin <- rbinom(1, size = 1, prob = 0.5)
if (coin) {
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,3), each = 5)
}
}
dataMatrix
t(dataMatrix)
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order,]
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
scale(dataMatrixOrdered)
par(mfrow = c(1,3))
plot(svd1$u[,1], 40:1, , xlab = "Row", y lab = "First left singular vector", pch = 19)
plot(svd1$u[,1], 40:1, , xlab = "Row", ylab = "First left singular vector", pch = 19)
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, , xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Cloumn", ylab = "First right singular vector", pch = 19)
svd1
par(mfrow = c(1,2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Cloumn", ylab = "Prop. of variance explained", pch = 19)
?scale()
colors()
topo.colors()
topo.colors
pal <- colorRamp(c("red","blue"))
library("RColorBrewer", lib.loc="~/R/win-library/3.1")
volcano
image(volcano)
image(volcano, col = pal(20))
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x,y)
smoothScatter(x,y)
library(knitr)
library(markdown)
knit('PA2.Rmd', 'PA2.md')
setwd("D:/DEVELOPER/R/Reproducible Research/RepData_PeerAssessment2")
knit('PA2.Rmd', 'PA2.md')
markdownToHTML('PA2.md', 'PA2.html')
browseURL(paste('file://', file.path(getwd(),'PA2.html'), sep=''))
